
prueba4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d26  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1b  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00001f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029a  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  2c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_11>
  30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  40:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_21>
  58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  8c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  90:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  94:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  98:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  9c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  ac:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  bc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  cc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  dc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  e0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  e4:	7a 01       	movw	r14, r20
  e6:	84 01       	movw	r16, r8
  e8:	8e 01       	movw	r16, r28
  ea:	98 01       	movw	r18, r16
  ec:	a2 01       	movw	r20, r4
  ee:	ac 01       	movw	r20, r24
  f0:	b6 01       	movw	r22, r12
  f2:	c0 01       	movw	r24, r0
  f4:	ca 01       	movw	r24, r20
  f6:	d4 01       	movw	r26, r8

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d1 e2       	ldi	r29, 0x21	; 33
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_clear_bss>:
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
 10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
 10e:	a2 30       	cpi	r26, 0x02	; 2
 110:	b2 07       	cpc	r27, r18
 112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
 114:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
 118:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

0000011c <__bad_interrupt>:
 11c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000120 <setup_timer0>:

uint8_t tiempoSelector = 0;
uint8_t puntuacion = 0;


void setup_timer0(){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0b00000010;	//Para modo CTC
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	TCCR0B = 0b00000011;	//Para modo CTC y prescaler 64
 132:	85 e4       	ldi	r24, 0x45	; 69
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010;	//Para habilitar OCR0A
 13c:	8e e6       	ldi	r24, 0x6E	; 110
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	22 e0       	ldi	r18, 0x02	; 2
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	OCR0A  = 124;			//Para interrumpir cada ms
 146:	87 e4       	ldi	r24, 0x47	; 71
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2c e7       	ldi	r18, 0x7C	; 124
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	
}
 150:	00 00       	nop
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <setup>:

void setup(){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	cli();
 160:	f8 94       	cli
	setup_timer0();			//Para el setup del timer 0
 162:	0e 94 90 00 	call	0x120	; 0x120 <setup_timer0>
	DDRK = 0xC0;    //0b11000000
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	20 ec       	ldi	r18, 0xC0	; 192
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	PCICR = (1<<PCIE2);
 170:	88 e6       	ldi	r24, 0x68	; 104
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	24 e0       	ldi	r18, 0x04	; 4
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	PCMSK2 = 0x3F;   //0b00111111 Hay que habilitarlos cuando llegue la señal de disparo, pq durante las deshabilitamos
 17a:	8d e6       	ldi	r24, 0x6D	; 109
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2f e3       	ldi	r18, 0x3F	; 63
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	DDRB = 0xFF;				//Puerto B configurado como salidas para controlar display 7 segmentos y selector
 184:	84 e2       	ldi	r24, 0x24	; 36
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	
	//El pin 7 del puerto B controla la selección de displays, los otros 7 pines el numero que aparece
	//Un '0' en la señal enciende el display
	PORTB = 0b00111111;				//Inicialemente a 0 en el display 0
 18e:	85 e2       	ldi	r24, 0x25	; 37
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2f e3       	ldi	r18, 0x3F	; 63
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	
	DDRD = 0b00100000;				//Entradas salvo el bit 5 que es salida para motor
 198:	8a e2       	ldi	r24, 0x2A	; 42
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	20 e2       	ldi	r18, 0x20	; 32
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	//Ver si esos sensores SW son normalemente activos o bajos...
	
	
	sei();
 1a2:	78 94       	sei
}
 1a4:	00 00       	nop
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <main>:

int main(void)
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
	setup();
 1b4:	0e 94 ac 00 	call	0x158	; 0x158 <setup>
    /* Replace with your application code */
    while (1) 
    {
		if(~PIND & (0b00010000)){				//En teoría el resto por señales bajas
 1b8:	89 e2       	ldi	r24, 0x29	; 41
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	88 2f       	mov	r24, r24
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	80 71       	andi	r24, 0x10	; 16
 1c6:	99 27       	eor	r25, r25
 1c8:	89 2b       	or	r24, r25
 1ca:	b1 f7       	brne	.-20     	; 0x1b8 <main+0xc>
			PCMSK2 = 0x3F;					//Rehabilitar las interrupciones de los bolos
 1cc:	8d e6       	ldi	r24, 0x6D	; 109
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2f e3       	ldi	r18, 0x3F	; 63
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
		}
	}
 1d6:	f0 cf       	rjmp	.-32     	; 0x1b8 <main+0xc>

000001d8 <__vector_21>:
		
	
}

ISR(TIMER0_COMPA_vect){						//Interrupcion que ocurre cada 1ms
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	tiempoSelector++;
 204:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
if(tiempoSelector == 5){					//Cada 5 ms
 20e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 212:	85 30       	cpi	r24, 0x05	; 5
 214:	a9 f5       	brne	.+106    	; 0x280 <__vector_21+0xa8>
		tiempoSelector = 0;					//Para resetar esa variable al cambiar de display
 216:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		//Preguntar Jorge pero creo que PORT7B no vale, tiene que ser PORTXi --> PXi para los puertos de E/S. No lo que pone en el datasheet, para este caso.
		PORTB ^= (1<<PB7);					//Máscara en el bit de seleccion para alternarlo cada 5 ms, es decir un refresco de 200 veces/segundo	
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	25 e2       	ldi	r18, 0x25	; 37
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	30 81       	ld	r19, Z
 226:	20 e8       	ldi	r18, 0x80	; 128
 228:	23 27       	eor	r18, r19
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
		//Posible bandera 'Selector	
		
		if(PINB & (1 << PB7)){				//Si está seleccionado Display 1, decenas
 22e:	83 e2       	ldi	r24, 0x23	; 35
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	74 f4       	brge	.+28     	; 0x256 <__vector_21+0x7e>
			setDisplay(puntuacion/10);
 23a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <puntuacion>
 23e:	8d ec       	ldi	r24, 0xCD	; 205
 240:	98 9f       	mul	r25, r24
 242:	81 2d       	mov	r24, r1
 244:	11 24       	eor	r1, r1
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	86 95       	lsr	r24
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 55 01 	call	0x2aa	; 0x2aa <setDisplay>
		
		
}
	
	
}
 254:	15 c0       	rjmp	.+42     	; 0x280 <__vector_21+0xa8>
		
		if(PINB & (1 << PB7)){				//Si está seleccionado Display 1, decenas
			setDisplay(puntuacion/10);
		}
		else{								//Si esta seleccionado Display 0, unidades
			setDisplay(puntuacion%10);
 256:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <puntuacion>
 25a:	8d ec       	ldi	r24, 0xCD	; 205
 25c:	98 9f       	mul	r25, r24
 25e:	81 2d       	mov	r24, r1
 260:	11 24       	eor	r1, r1
 262:	86 95       	lsr	r24
 264:	86 95       	lsr	r24
 266:	86 95       	lsr	r24
 268:	88 0f       	add	r24, r24
 26a:	28 2f       	mov	r18, r24
 26c:	22 0f       	add	r18, r18
 26e:	22 0f       	add	r18, r18
 270:	82 0f       	add	r24, r18
 272:	f9 2f       	mov	r31, r25
 274:	f8 1b       	sub	r31, r24
 276:	8f 2f       	mov	r24, r31
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 55 01 	call	0x2aa	; 0x2aa <setDisplay>
		
		
}
	
	
}
 280:	00 00       	nop
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <setDisplay>:
void setDisplay(int numero){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <setDisplay+0x6>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	89 83       	std	Y+1, r24	; 0x01
	
	//Primero hago un lienzo, en el que pongo los displays apagados durante el ciclo de reloj para después poder poner el numero al gusto
	PORTB &= ~(1<<PB6)&~(1<<PB5)&~(1<<PB4)&~(1<<PB3)&~(1<<PB2)&~(1<<PB1)&~(1<<PB0);  //Todos los bits de esos puertos a 1_
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	25 e2       	ldi	r18, 0x25	; 37
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	20 78       	andi	r18, 0x80	; 128
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
	//PORTB = 0bX0000000
	switch(numero)
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	09 2e       	mov	r0, r25
 2d0:	00 0c       	add	r0, r0
 2d2:	aa 0b       	sbc	r26, r26
 2d4:	bb 0b       	sbc	r27, r27
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	29 e0       	ldi	r18, 0x09	; 9
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	84 1b       	sub	r24, r20
 2e0:	95 0b       	sbc	r25, r21
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <setDisplay+0x40>
 2e8:	69 c0       	rjmp	.+210    	; 0x3bc <setDisplay+0x112>
 2ea:	8e 58       	subi	r24, 0x8E	; 142
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	fc 01       	movw	r30, r24
 2f0:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__tablejump2__>
	{
		case 0:	//0b00111111;
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5);
 2f4:	85 e2       	ldi	r24, 0x25	; 37
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	25 e2       	ldi	r18, 0x25	; 37
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	2f 63       	ori	r18, 0x3F	; 63
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
		break;
 306:	63 c0       	rjmp	.+198    	; 0x3ce <setDisplay+0x124>
		case 1:	//0b00000110;
		PORTB |= (1<<PB1)|(1<<PB2);
 308:	85 e2       	ldi	r24, 0x25	; 37
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 e2       	ldi	r18, 0x25	; 37
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	26 60       	ori	r18, 0x06	; 6
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
		break;
 31a:	59 c0       	rjmp	.+178    	; 0x3ce <setDisplay+0x124>
		case 2: //0b01011011;
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB3)|(1<<PB4)|(1<<PB6);
 31c:	85 e2       	ldi	r24, 0x25	; 37
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	25 e2       	ldi	r18, 0x25	; 37
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	f9 01       	movw	r30, r18
 326:	20 81       	ld	r18, Z
 328:	2b 65       	ori	r18, 0x5B	; 91
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
		break;
 32e:	4f c0       	rjmp	.+158    	; 0x3ce <setDisplay+0x124>
		case 3: //0b01001111;
		PORTB |= (1<<PB6)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e2       	ldi	r18, 0x25	; 37
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	2f 64       	ori	r18, 0x4F	; 79
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
		break;
 342:	45 c0       	rjmp	.+138    	; 0x3ce <setDisplay+0x124>
		case 4: //0b01100110;
		PORTB |= (1<<PB1)|(1<<PB2)|(1<<PB5)|(1<<PB6);
 344:	85 e2       	ldi	r24, 0x25	; 37
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	25 e2       	ldi	r18, 0x25	; 37
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	26 66       	ori	r18, 0x66	; 102
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
		break;
 356:	3b c0       	rjmp	.+118    	; 0x3ce <setDisplay+0x124>
		case 5: //0b01101101;
		PORTB |= (1<<PB0)|(1<<PB2)|(1<<PB3)|(1<<PB5)|(1<<PB6);
 358:	85 e2       	ldi	r24, 0x25	; 37
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	25 e2       	ldi	r18, 0x25	; 37
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	f9 01       	movw	r30, r18
 362:	20 81       	ld	r18, Z
 364:	2d 66       	ori	r18, 0x6D	; 109
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
		break;
 36a:	31 c0       	rjmp	.+98     	; 0x3ce <setDisplay+0x124>
		case 6: //0b01111101;
		PORTB |= (1<<PB0)|(1<<PB5)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB6);
 36c:	85 e2       	ldi	r24, 0x25	; 37
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	25 e2       	ldi	r18, 0x25	; 37
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	2d 67       	ori	r18, 0x7D	; 125
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
		break;
 37e:	27 c0       	rjmp	.+78     	; 0x3ce <setDisplay+0x124>
		case 7: //0b00000111;
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2);
 380:	85 e2       	ldi	r24, 0x25	; 37
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	25 e2       	ldi	r18, 0x25	; 37
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	27 60       	ori	r18, 0x07	; 7
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
		break;
 392:	1d c0       	rjmp	.+58     	; 0x3ce <setDisplay+0x124>
		case 8: //0b01111111;
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB6);
 394:	85 e2       	ldi	r24, 0x25	; 37
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	25 e2       	ldi	r18, 0x25	; 37
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	20 81       	ld	r18, Z
 3a0:	2f 67       	ori	r18, 0x7F	; 127
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
		break;
 3a6:	13 c0       	rjmp	.+38     	; 0x3ce <setDisplay+0x124>
		case 9: //0b01101111;
		PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB5)|(1<<PB6);
 3a8:	85 e2       	ldi	r24, 0x25	; 37
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	25 e2       	ldi	r18, 0x25	; 37
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	20 81       	ld	r18, Z
 3b4:	27 66       	ori	r18, 0x67	; 103
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
		break;
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <setDisplay+0x124>
		default:
		PORTB |= (1<<PB6);
 3bc:	85 e2       	ldi	r24, 0x25	; 37
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	25 e2       	ldi	r18, 0x25	; 37
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	20 64       	ori	r18, 0x40	; 64
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
	}
}
 3ce:	00 00       	nop
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <__vector_11>:

ISR(PCINT2_vect){ //Cuidado que era por flanco de bajada
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	1f 92       	push	r1
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
	puntuacion++;
 3fc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <puntuacion>
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <puntuacion>
	volatile uint8_t puertoactual = ~PINK;  //PINK normalmente estará a 1 !!
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	fc 01       	movw	r30, r24
 40c:	80 81       	ld	r24, Z
 40e:	80 95       	com	r24
 410:	89 83       	std	Y+1, r24	; 0x01
	//volatile uint8_t bitscambiados= 0;
//	bitscambiados = ~(puertoactual ^ puertoanterior); //Lo negamos por el tema de que esta en nivel alto y pasa a nivel bajo
	
	//AND bit a bit para determinar si un bit en particular ha cambiado en el puerto
	if(puertoactual & (0b00000001)){
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	81 70       	andi	r24, 0x01	; 1
 41a:	99 27       	eor	r25, r25
 41c:	89 2b       	or	r24, r25
 41e:	49 f0       	breq	.+18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		PCMSK2 &=~(1<<PCINT16);
 420:	8d e6       	ldi	r24, 0x6D	; 109
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	2d e6       	ldi	r18, 0x6D	; 109
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	2e 7f       	andi	r18, 0xFE	; 254
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	} //Deshabilito esa interrupcion para que no rebote
	if(puertoactual & (0b00000010))
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	82 70       	andi	r24, 0x02	; 2
 43a:	99 27       	eor	r25, r25
 43c:	89 2b       	or	r24, r25
 43e:	49 f0       	breq	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{PCMSK2 &=~(1<<PCINT17);
 440:	8d e6       	ldi	r24, 0x6D	; 109
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	2d e6       	ldi	r18, 0x6D	; 109
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	f9 01       	movw	r30, r18
 44a:	20 81       	ld	r18, Z
 44c:	2d 7f       	andi	r18, 0xFD	; 253
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00000100))
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	88 2f       	mov	r24, r24
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	84 70       	andi	r24, 0x04	; 4
 45a:	99 27       	eor	r25, r25
 45c:	89 2b       	or	r24, r25
 45e:	49 f0       	breq	.+18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	{PCMSK2 &=~(1<<PCINT18);
 460:	8d e6       	ldi	r24, 0x6D	; 109
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	2d e6       	ldi	r18, 0x6D	; 109
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	20 81       	ld	r18, Z
 46c:	2b 7f       	andi	r18, 0xFB	; 251
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00001000))
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	88 70       	andi	r24, 0x08	; 8
 47a:	99 27       	eor	r25, r25
 47c:	89 2b       	or	r24, r25
 47e:	49 f0       	breq	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	{PCMSK2 &=~(1<<PCINT19);
 480:	8d e6       	ldi	r24, 0x6D	; 109
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	2d e6       	ldi	r18, 0x6D	; 109
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	27 7f       	andi	r18, 0xF7	; 247
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00010000))
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	80 71       	andi	r24, 0x10	; 16
 49a:	99 27       	eor	r25, r25
 49c:	89 2b       	or	r24, r25
 49e:	49 f0       	breq	.+18     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{PCMSK2 &=~(1<<PCINT20);
 4a0:	8d e6       	ldi	r24, 0x6D	; 109
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	2d e6       	ldi	r18, 0x6D	; 109
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	2f 7e       	andi	r18, 0xEF	; 239
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00100000))
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	80 72       	andi	r24, 0x20	; 32
 4ba:	99 27       	eor	r25, r25
 4bc:	89 2b       	or	r24, r25
 4be:	49 f0       	breq	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{PCMSK2 &=~(1<<PCINT21);
 4c0:	8d e6       	ldi	r24, 0x6D	; 109
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	2d e6       	ldi	r18, 0x6D	; 109
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	2f 7d       	andi	r18, 0xDF	; 223
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	}
//ese and del if entra siempre que en 1 de los 8 bits salga un 1
	//	puertoanterior=puertoactual;
 4d2:	00 00       	nop
 4d4:	0f 90       	pop	r0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <__tablejump2__>:
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	05 90       	lpm	r0, Z+
 4f8:	f4 91       	lpm	r31, Z
 4fa:	e0 2d       	mov	r30, r0
 4fc:	09 94       	ijmp

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
