
Bolera4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000006f8  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800202  00800202  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c50  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f55  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cba  00000000  00000000  00003501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083b  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000730  00000000  00000000  00004d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_9>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_11>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_17>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e8 ef       	ldi	r30, 0xF8	; 248
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a2 e0       	ldi	r26, 0x02	; 2
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	aa 31       	cpi	r26, 0x1A	; 26
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 84 02 	call	0x508	; 0x508 <main>
 11a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <girarVertical>:
//MACROS

// getter para los sensores opticos
int getOptico(int num){
	return readBit(SOPIN, num);
}
 122:	9c 01       	movw	r18, r24
 124:	eb e0       	ldi	r30, 0x0B	; 11
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	90 81       	ld	r25, Z
 12a:	9d 7f       	andi	r25, 0xFD	; 253
 12c:	90 83       	st	Z, r25
 12e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
 132:	21 30       	cpi	r18, 0x01	; 1
 134:	31 05       	cpc	r19, r1
 136:	31 f4       	brne	.+12     	; 0x144 <girarVertical+0x22>
 138:	e8 e0       	ldi	r30, 0x08	; 8
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	80 81       	ld	r24, Z
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 83       	st	Z, r24
 142:	07 c0       	rjmp	.+14     	; 0x152 <girarVertical+0x30>
 144:	23 2b       	or	r18, r19
 146:	29 f4       	brne	.+10     	; 0x152 <girarVertical+0x30>
 148:	e8 e0       	ldi	r30, 0x08	; 8
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	80 83       	st	Z, r24
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
 15c:	80 81       	ld	r24, Z
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <frenoVertical>:
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 16a:	eb e0       	ldi	r30, 0x0B	; 11
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <moverVastagoAdelante>:
 17c:	eb e0       	ldi	r30, 0x0B	; 11
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 61       	ori	r24, 0x10	; 16
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <moverVastagoAtras>:
 194:	eb e0       	ldi	r30, 0x0B	; 11
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 81       	ld	r24, Z
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	80 83       	st	Z, r24
 19e:	80 81       	ld	r24, Z
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	80 83       	st	Z, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <engancharCarrito>:
 1ac:	eb e0       	ldi	r30, 0x0B	; 11
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 81       	ld	r24, Z
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	80 83       	st	Z, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <liberarCarrito>:
 1be:	eb e0       	ldi	r30, 0x0B	; 11
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	80 83       	st	Z, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <getSensor1>:
 1d0:	89 b1       	in	r24, 0x09	; 9
 1d2:	80 74       	andi	r24, 0x40	; 64
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 2e       	mov	r0, r24
 1d8:	89 2f       	mov	r24, r25
 1da:	00 0c       	add	r0, r0
 1dc:	88 1f       	adc	r24, r24
 1de:	99 0b       	sbc	r25, r25
 1e0:	00 0c       	add	r0, r0
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	08 95       	ret

000001e8 <getSensor2>:
 1e8:	89 b1       	in	r24, 0x09	; 9
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <getSensor3>:
 1f0:	89 b1       	in	r24, 0x09	; 9
 1f2:	82 70       	andi	r24, 0x02	; 2
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	08 95       	ret

000001fc <getSensor4>:
 1fc:	89 b1       	in	r24, 0x09	; 9
 1fe:	80 71       	andi	r24, 0x10	; 16
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	95 95       	asr	r25
 208:	87 95       	ror	r24
 20a:	95 95       	asr	r25
 20c:	87 95       	ror	r24
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	08 95       	ret

00000214 <getSensor5>:
 214:	89 b1       	in	r24, 0x09	; 9
 216:	88 70       	andi	r24, 0x08	; 8
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	08 95       	ret

00000228 <getSensor6>:
 228:	89 b1       	in	r24, 0x09	; 9
 22a:	84 70       	andi	r24, 0x04	; 4
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	95 95       	asr	r25
 234:	87 95       	ror	r24
 236:	08 95       	ret

00000238 <encenderLED>:
// *******
// LED Y DISPLAYS
// *******

void encenderLED(){
	setBit(L1PORT, L1X);
 238:	eb e0       	ldi	r30, 0x0B	; 11
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <apagarLED>:
}

void apagarLED(){
	clearBit(L1PORT, L1X);
 244:	eb e0       	ldi	r30, 0x0B	; 11
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	80 81       	ld	r24, Z
 24a:	8f 7b       	andi	r24, 0xBF	; 191
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <updateTime>:
	ms_elapsed = time;
}
// getter para el valor del tiempo actual
inline uint32_t getTime(){
	return ms_elapsed;
}
 250:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ms_elapsed>
 254:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ms_elapsed+0x1>
 258:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ms_elapsed+0x2>
 25c:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ms_elapsed+0x3>
 260:	0a 96       	adiw	r24, 0x0a	; 10
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ms_elapsed>
 26a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <ms_elapsed+0x1>
 26e:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <ms_elapsed+0x2>
 272:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <ms_elapsed+0x3>
 276:	08 95       	ret

00000278 <setTime>:
 278:	09 2e       	mov	r0, r25
 27a:	00 0c       	add	r0, r0
 27c:	aa 0b       	sbc	r26, r26
 27e:	bb 0b       	sbc	r27, r27
 280:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ms_elapsed>
 284:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <ms_elapsed+0x1>
 288:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <ms_elapsed+0x2>
 28c:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <ms_elapsed+0x3>
 290:	08 95       	ret

00000292 <getParpadeo>:

// getter para la bandera parpadear
inline uint8_t getParpadeo(){
	return parpadear;
}
 292:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <parpadear>
 296:	08 95       	ret

00000298 <parpadearLED>:

// funcion que, si esta llamada, actualiza el estado de la led, para que esta parpadeando
// llamar la funcion mediante interrupciones temporales (resolucion <50ms)
inline void parpadearLED(){
	if(ms_elapsed % 1000 < 900){
 298:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <ms_elapsed>
 29c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <ms_elapsed+0x1>
 2a0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ms_elapsed+0x2>
 2a4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ms_elapsed+0x3>
 2a8:	28 ee       	ldi	r18, 0xE8	; 232
 2aa:	33 e0       	ldi	r19, 0x03	; 3
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__udivmodsi4>
 2b4:	64 38       	cpi	r22, 0x84	; 132
 2b6:	73 40       	sbci	r23, 0x03	; 3
 2b8:	81 05       	cpc	r24, r1
 2ba:	91 05       	cpc	r25, r1
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <parpadearLED+0x2c>
		apagarLED();
 2be:	0e 94 22 01 	call	0x244	; 0x244 <apagarLED>
 2c2:	08 95       	ret
	}
	else{
		encenderLED();
 2c4:	0e 94 1c 01 	call	0x238	; 0x238 <encenderLED>
 2c8:	08 95       	ret

000002ca <__vector_11>:
	}
}

// interrupcion para el boton de disparo
// incluye proteccion, se atiende solo cuando estamos en LANZAMIENTO
ISR(PCINT2_vect){
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
	if(state == LANZAMIENTO){
 2d6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <__vector_11+0x1a>
		state = TIRAR_BOLA;
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	}
}
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_9>:

// interrupcon del SW2 que sirva para distinguir que pulsador se ha pulsado
ISR(PCINT0_vect)
{
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	// debounce protection:
	// si hay dos interupciones entre menos que 50 ms
	if(last_interruption_time +50 < ms_elapsed){
 312:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <last_interruption_time>
 316:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <last_interruption_time+0x1>
 31a:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <last_interruption_time+0x2>
 31e:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <last_interruption_time+0x3>
 322:	c2 96       	adiw	r24, 0x32	; 50
 324:	a1 1d       	adc	r26, r1
 326:	b1 1d       	adc	r27, r1
 328:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <ms_elapsed>
 32c:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <ms_elapsed+0x1>
 330:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <ms_elapsed+0x2>
 334:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <ms_elapsed+0x3>
 338:	84 17       	cp	r24, r20
 33a:	95 07       	cpc	r25, r21
 33c:	a6 07       	cpc	r26, r22
 33e:	b7 07       	cpc	r27, r23
 340:	08 f0       	brcs	.+2      	; 0x344 <__vector_9+0x54>
 342:	88 c0       	rjmp	.+272    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		last_interruption_time = ms_elapsed;  // guardar tiempo acual
 344:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ms_elapsed>
 348:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <ms_elapsed+0x1>
 34c:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <ms_elapsed+0x2>
 350:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <ms_elapsed+0x3>
 354:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <last_interruption_time>
 358:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <last_interruption_time+0x1>
 35c:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <last_interruption_time+0x2>
 360:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <last_interruption_time+0x3>
		switch (lanzadorFlag){
 364:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	29 f0       	breq	.+10     	; 0x376 <__vector_9+0x86>
 36c:	60 f1       	brcs	.+88     	; 0x3c6 <__vector_9+0xd6>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	09 f4       	brne	.+2      	; 0x374 <__vector_9+0x84>
 372:	51 c0       	rjmp	.+162    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 374:	6c c0       	rjmp	.+216    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			case 1:  // moviemiento hacia derecha
			// si estoy RIGHT
			if (position==RIGHT){
 376:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <position>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	61 f4       	brne	.+24     	; 0x396 <__vector_9+0xa6>
	position = LEFT;
}

// interrupcion del fin de carrera derecho,
inline void rightInterrupt(){
	if(state==LANZAMIENTO){  // si estamos en lanzamiento, cambiamos direccion
 37e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	29 f4       	brne	.+10     	; 0x390 <__vector_9+0xa0>
		girarVertical(0);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 38e:	62 c0       	rjmp	.+196    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();  // si no, frenamos
 390:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 394:	5f c0       	rjmp	.+190    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			case 1:  // moviemiento hacia derecha
			// si estoy RIGHT
			if (position==RIGHT){
				rightInterrupt();
			}
			else if (position==LEFT){  // si estoy LEFT
 396:	81 11       	cpse	r24, r1
 398:	5d c0       	rjmp	.+186    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
}

// interrupcion del pulsador medio
inline void middleInterrupt(){
	if(position==LEFT)	{
 39a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <position>
 39e:	81 11       	cpse	r24, r1
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <__vector_9+0xba>
		position = RIGHT;  // cambiar position flag, que ahora estamos a la derecha
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <position>
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__vector_9+0xbe>
	}
	else{
		position = LEFT;
 3aa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <position>
	}
	if(state==LANZAMIENTO){  // cambiar de direccion en estado de lanzamiento
 3ae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <__vector_9+0xd0>
		girarVertical(0);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 3be:	4a c0       	rjmp	.+148    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();
 3c0:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 3c4:	47 c0       	rjmp	.+142    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				middleInterrupt();
			}
			break;
			case 0:  // moviendo hacia izq
			// si estoy moviendo hacia la izquierda y estoy LEFT
			if (position==LEFT){
 3c6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <position>
 3ca:	81 11       	cpse	r24, r1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <__vector_9+0xf6>
	}
}

// interrupcion del pulsador a la izquierda
inline void leftInterrupt(){
	if(state==LANZAMIENTO){
 3ce:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <__vector_9+0xf0>
		girarVertical(1);  // cambiar de direccion en lanzamiento
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 3de:	3a c0       	rjmp	.+116    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();
 3e0:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 3e4:	37 c0       	rjmp	.+110    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			// si estoy moviendo hacia la izquierda y estoy LEFT
			if (position==LEFT){
				leftInterrupt();
			}
			// movimiento hacia la izqrda, estoy RIGHT
			else if (position==RIGHT){
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	a9 f5       	brne	.+106    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
}

// interrupcion del pulsador medio
inline void middleInterrupt(){
	if(position==LEFT)	{
 3ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <position>
 3ee:	81 11       	cpse	r24, r1
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <__vector_9+0x10a>
		position = RIGHT;  // cambiar position flag, que ahora estamos a la derecha
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <position>
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <__vector_9+0x10e>
	}
	else{
		position = LEFT;
 3fa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <position>
	}
	if(state==LANZAMIENTO){  // cambiar de direccion en estado de lanzamiento
 3fe:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	29 f4       	brne	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		girarVertical(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 40e:	22 c0       	rjmp	.+68     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();
 410:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 414:	1f c0       	rjmp	.+62     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			else if (position==RIGHT){
				middleInterrupt();
			}
			break;
			case 2:  // parado
			if(position == LEFT){
 416:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <position>
 41a:	81 11       	cpse	r24, r1
 41c:	0c c0       	rjmp	.+24     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	}
}

// interrupcion del pulsador a la izquierda
inline void leftInterrupt(){
	if(state==LANZAMIENTO){
 41e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	29 f4       	brne	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		girarVertical(1);  // cambiar de direccion en lanzamiento
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 42e:	12 c0       	rjmp	.+36     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();
 430:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 434:	0f c0       	rjmp	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	position = LEFT;
}

// interrupcion del fin de carrera derecho,
inline void rightInterrupt(){
	if(state==LANZAMIENTO){  // si estamos en lanzamiento, cambiamos direccion
 436:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	29 f4       	brne	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		girarVertical(0);
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	else{
		frenoVertical();  // si no, frenamos
 448:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			else{
				rightInterrupt();
			}
			break;
			default:
				lanzadorFlag=2;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
	}
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <setup>:
int s4state;
int s5state;
int s6state;

void setup(){
	enableInterrupt(SW2EIFR);
 476:	8d b3       	in	r24, 0x1d	; 29
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC01); // interrupcion solo en flanco de bajada, no modificando otros valores del registro
 47c:	e9 e6       	ldi	r30, 0x69	; 105
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
	// Sensores:
	setInput(SW2DDR, SW2X);
 486:	8a b1       	in	r24, 0x0a	; 10
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	8a b9       	out	0x0a, r24	; 10
	setInput(SW3DDR, SW3X);
 48c:	8a b1       	in	r24, 0x0a	; 10
 48e:	8d 7f       	andi	r24, 0xFD	; 253
 490:	8a b9       	out	0x0a, r24	; 10
	setInput(SW4DDR, SW4X);
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	8f 7e       	andi	r24, 0xEF	; 239
 496:	8a b9       	out	0x0a, r24	; 10
	setInput(SW5DDR, SW5X);
 498:	8a b1       	in	r24, 0x0a	; 10
 49a:	87 7f       	andi	r24, 0xF7	; 247
 49c:	8a b9       	out	0x0a, r24	; 10
	// Motores:
	setOutput(M1_diDDR, M1_di_X);
 49e:	e7 e0       	ldi	r30, 0x07	; 7
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	80 81       	ld	r24, Z
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	80 83       	st	Z, r24
	setOutput(M2_diDDR, M2_di_X);
 4a8:	80 81       	ld	r24, Z
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	80 83       	st	Z, r24
	setOutput(M3_diDDR, M3_di_X);
 4ae:	ea e0       	ldi	r30, 0x0A	; 10
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	80 81       	ld	r24, Z
 4b4:	84 60       	ori	r24, 0x04	; 4
 4b6:	80 83       	st	Z, r24
	setOutput(M4_diDDR, M4_di_X);
 4b8:	80 81       	ld	r24, Z
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	80 83       	st	Z, r24
	setOutput(M5_diDDR, M5_di_X);
 4be:	8a b1       	in	r24, 0x0a	; 10
 4c0:	80 62       	ori	r24, 0x20	; 32
 4c2:	8a b9       	out	0x0a, r24	; 10
	setOutput(M1_enDDR, M1_en_X);
 4c4:	80 81       	ld	r24, Z
 4c6:	81 60       	ori	r24, 0x01	; 1
 4c8:	80 83       	st	Z, r24
	setOutput(M2_enDDR, M2_en_X);
 4ca:	80 81       	ld	r24, Z
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	80 83       	st	Z, r24
	setOutput(M3_enDDR, M3_en_X);
 4d0:	80 81       	ld	r24, Z
 4d2:	80 61       	ori	r24, 0x10	; 16
 4d4:	80 83       	st	Z, r24
	setOutput(M4_enDDR, M4_en_X);
 4d6:	80 81       	ld	r24, Z
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	80 83       	st	Z, r24
	setOutput(M5_enDDR, M5_en_X);
 4dc:	8a b1       	in	r24, 0x0a	; 10
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8a b9       	out	0x0a, r24	; 10
	setOutput(M2_bkDDR, M2_bk_X);
 4e2:	80 81       	ld	r24, Z
 4e4:	88 60       	ori	r24, 0x08	; 8
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret

000004ea <timerSetup>:
}

void timerSetup(){
	TCCR1A = 0x00;
 4ea:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B = (1 << WGM12) | (1 << CS12);  // CTC mode, prescaler 256
 4ee:	8c e0       	ldi	r24, 0x0C	; 12
 4f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	OCR1A = 625;  // timer con frecuencia 100Hz
 4f4:	81 e7       	ldi	r24, 0x71	; 113
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 4fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TIMSK1 = (1 << OCIE1A);
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
 506:	08 95       	ret

00000508 <main>:
}

int main(void)
{
	cli();
 508:	f8 94       	cli
	setup();
 50a:	0e 94 3b 02 	call	0x476	; 0x476 <setup>
	timerSetup();
 50e:	0e 94 75 02 	call	0x4ea	; 0x4ea <timerSetup>
	sei();
 512:	78 94       	sei
	setTime(0);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 3c 01 	call	0x278	; 0x278 <setTime>
	* M3: moverVastago
	* M4: parar Vastago 
	 */
	while (1)
	{
		setTime(0);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 3c 01 	call	0x278	; 0x278 <setTime>
		apagarLED();
 524:	0e 94 22 01 	call	0x244	; 0x244 <apagarLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	89 e6       	ldi	r24, 0x69	; 105
 52c:	98 e1       	ldi	r25, 0x18	; 24
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <main+0x26>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0x30>
 538:	00 00       	nop
		_delay_ms(500);
		liberarCarrito();
 53a:	0e 94 df 00 	call	0x1be	; 0x1be <liberarCarrito>
 53e:	2f ef       	ldi	r18, 0xFF	; 255
 540:	89 e6       	ldi	r24, 0x69	; 105
 542:	98 e1       	ldi	r25, 0x18	; 24
 544:	21 50       	subi	r18, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <main+0x3c>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0x46>
 54e:	00 00       	nop
		_delay_ms(500);
		engancharCarrito();
 550:	0e 94 d6 00 	call	0x1ac	; 0x1ac <engancharCarrito>
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	89 e6       	ldi	r24, 0x69	; 105
 558:	98 e1       	ldi	r25, 0x18	; 24
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x52>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x5c>
 564:	00 00       	nop
		_delay_ms(500);
		girarVertical(1);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 56e:	2f ef       	ldi	r18, 0xFF	; 255
 570:	89 e6       	ldi	r24, 0x69	; 105
 572:	98 e1       	ldi	r25, 0x18	; 24
 574:	21 50       	subi	r18, 0x01	; 1
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x6c>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x76>
 57e:	00 00       	nop
		_delay_ms(500);
		girarVertical(0);
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	83 ec       	ldi	r24, 0xC3	; 195
 58c:	99 e0       	ldi	r25, 0x09	; 9
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <main+0x86>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x90>
 598:	00 00       	nop
		_delay_ms(200);
		girarVertical(1);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	83 ec       	ldi	r24, 0xC3	; 195
 5a6:	99 e0       	ldi	r25, 0x09	; 9
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0xa0>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0xaa>
 5b2:	00 00       	nop
		_delay_ms(200);
		girarVertical(0);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 5bc:	2f ef       	ldi	r18, 0xFF	; 255
 5be:	89 e6       	ldi	r24, 0x69	; 105
 5c0:	98 e1       	ldi	r25, 0x18	; 24
 5c2:	21 50       	subi	r18, 0x01	; 1
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	90 40       	sbci	r25, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <main+0xba>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0xc4>
 5cc:	00 00       	nop
		_delay_ms(500);
		frenoVertical();
 5ce:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	89 e6       	ldi	r24, 0x69	; 105
 5d6:	98 e1       	ldi	r25, 0x18	; 24
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	90 40       	sbci	r25, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0xd0>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0xda>
 5e2:	00 00       	nop
		_delay_ms(500);
		moverVastagoAdelante();
 5e4:	0e 94 be 00 	call	0x17c	; 0x17c <moverVastagoAdelante>
 5e8:	2f ef       	ldi	r18, 0xFF	; 255
 5ea:	89 e6       	ldi	r24, 0x69	; 105
 5ec:	98 e1       	ldi	r25, 0x18	; 24
 5ee:	21 50       	subi	r18, 0x01	; 1
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0xe6>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0xf0>
 5f8:	00 00       	nop
		_delay_ms(500);
		moverVastagoAtras();
 5fa:	0e 94 ca 00 	call	0x194	; 0x194 <moverVastagoAtras>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	89 e6       	ldi	r24, 0x69	; 105
 602:	98 e1       	ldi	r25, 0x18	; 24
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0xfc>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x106>
 60e:	00 00       	nop
		_delay_ms(500);
		getSensor1();
 610:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <getSensor1>
 614:	83 cf       	rjmp	.-250    	; 0x51c <main+0x14>

00000616 <__vector_17>:
	}
}

ISR(TIMER1_COMPA_vect){
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	updateTime();
 638:	0e 94 28 01 	call	0x250	; 0x250 <updateTime>
	// llamar parpadear led, si estamos en modo de parpadeo
	if(getParpadeo()){
 63c:	0e 94 49 01 	call	0x292	; 0x292 <getParpadeo>
 640:	81 11       	cpse	r24, r1
		parpadearLED();
 642:	0e 94 4c 01 	call	0x298	; 0x298 <parpadearLED>
	}
	s1state = getSensor1();
 646:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <getSensor1>
 64a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <s1state+0x1>
 64e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <s1state>
	s2state = getSensor2();
 652:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <getSensor2>
 656:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <s2state+0x1>
 65a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <s2state>
	s3state = getSensor3();
 65e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <getSensor3>
 662:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <s3state+0x1>
 666:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <s3state>
	s4state = getSensor4();
 66a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <getSensor4>
 66e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <s4state+0x1>
 672:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <s4state>
	s6state = getSensor6();
 676:	0e 94 14 01 	call	0x228	; 0x228 <getSensor6>
 67a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <s6state+0x1>
 67e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <s6state>
	s5state = getSensor5();
 682:	0e 94 0a 01 	call	0x214	; 0x214 <getSensor5>
 686:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <s5state+0x1>
 68a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <s5state>
}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__udivmodsi4>:
 6b0:	a1 e2       	ldi	r26, 0x21	; 33
 6b2:	1a 2e       	mov	r1, r26
 6b4:	aa 1b       	sub	r26, r26
 6b6:	bb 1b       	sub	r27, r27
 6b8:	fd 01       	movw	r30, r26
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <__udivmodsi4_ep>

000006bc <__udivmodsi4_loop>:
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	ee 1f       	adc	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	a2 17       	cp	r26, r18
 6c6:	b3 07       	cpc	r27, r19
 6c8:	e4 07       	cpc	r30, r20
 6ca:	f5 07       	cpc	r31, r21
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__udivmodsi4_ep>
 6ce:	a2 1b       	sub	r26, r18
 6d0:	b3 0b       	sbc	r27, r19
 6d2:	e4 0b       	sbc	r30, r20
 6d4:	f5 0b       	sbc	r31, r21

000006d6 <__udivmodsi4_ep>:
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a 94       	dec	r1
 6e0:	69 f7       	brne	.-38     	; 0x6bc <__udivmodsi4_loop>
 6e2:	60 95       	com	r22
 6e4:	70 95       	com	r23
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	9b 01       	movw	r18, r22
 6ec:	ac 01       	movw	r20, r24
 6ee:	bd 01       	movw	r22, r26
 6f0:	cf 01       	movw	r24, r30
 6f2:	08 95       	ret

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
