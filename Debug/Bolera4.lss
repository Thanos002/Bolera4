
Bolera4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800202  00800202  000004fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e6  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5a  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4b  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b0  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000045a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_9>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_17>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e6       	ldi	r30, 0x64	; 100
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	a2 e0       	ldi	r26, 0x02	; 2
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	ae 30       	cpi	r26, 0x0E	; 14
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
 11a:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <girarVertical>:
void liberarCarrito(){
	clearBit(M4_diPORT, M4_di_X);
	setBit(M4_enPORT, M4_en_X);
}
void pararCarrito(){
	clearBit(M4_enPORT, M4_en_X);
 122:	9c 01       	movw	r18, r24
 124:	eb e0       	ldi	r30, 0x0B	; 11
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	90 81       	ld	r25, Z
 12a:	9d 7f       	andi	r25, 0xFD	; 253
 12c:	90 83       	st	Z, r25
 12e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
 132:	21 30       	cpi	r18, 0x01	; 1
 134:	31 05       	cpc	r19, r1
 136:	31 f4       	brne	.+12     	; 0x144 <girarVertical+0x22>
 138:	e8 e0       	ldi	r30, 0x08	; 8
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	80 81       	ld	r24, Z
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 83       	st	Z, r24
 142:	07 c0       	rjmp	.+14     	; 0x152 <girarVertical+0x30>
 144:	23 2b       	or	r18, r19
 146:	29 f4       	brne	.+10     	; 0x152 <girarVertical+0x30>
 148:	e8 e0       	ldi	r30, 0x08	; 8
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	80 83       	st	Z, r24
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
 15c:	80 81       	ld	r24, Z
 15e:	87 7f       	andi	r24, 0xF7	; 247
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <frenoVertical>:
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 16a:	eb e0       	ldi	r30, 0x0B	; 11
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <getSensor1>:


// Sensor SW1:

int getSensor1(){
	return readBit(SW1X,SW1PIN);
 176:	29 b1       	in	r18, 0x09	; 9
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <getSensor1+0xc>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	2a 95       	dec	r18
 184:	e2 f7       	brpl	.-8      	; 0x17e <getSensor1+0x8>
 186:	86 70       	andi	r24, 0x06	; 6
 188:	99 27       	eor	r25, r25
 18a:	29 b1       	in	r18, 0x09	; 9
}
 18c:	02 c0       	rjmp	.+4      	; 0x192 <getSensor1+0x1c>
 18e:	95 95       	asr	r25
 190:	87 95       	ror	r24
 192:	2a 95       	dec	r18
 194:	e2 f7       	brpl	.-8      	; 0x18e <getSensor1+0x18>
 196:	08 95       	ret

00000198 <getSensor2>:

// Sensor SW2:
// ojo: aqui fin de carrera tambien en la mitad del trayecto!

int getSensor2(){
	return readBit(SW2PIN,SW2X);
 198:	89 b1       	in	r24, 0x09	; 9
}
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

000001a0 <getSensor3>:

// Sensor SW3:

int getSensor3(){
	return readBit(SW3PIN,SW3X);
 1a0:	89 b1       	in	r24, 0x09	; 9
 1a2:	82 70       	andi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
}
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	08 95       	ret

000001ac <rightInterrupt>:
	position = RIGHT;
}

// interrupcion del fin de carrera derecho, 
void rightInterrupt(){
	if(state==LANZAMIENTO  || state == PARPADEO){  // si estamos en lanzamiento, cambiamos direccion
 1ac:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <rightInterrupt+0xc>
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <rightInterrupt+0x16>
		girarVertical(0);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 1c0:	08 95       	ret
	}
	else{
		frenoVertical();  // si no, frenamos
 1c2:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 1c6:	08 95       	ret

000001c8 <middleInterrupt>:
	}
}

// interrupcion del pulsador medio
void middleInterrupt(){
	if(position==LEFT)	{
 1c8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <position>
 1cc:	81 11       	cpse	r24, r1
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <middleInterrupt+0x10>
		position = RIGHT;  // cambiar position flag, que ahora estamos a la derecha
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <position>
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <middleInterrupt+0x14>
	}
	else{
		position = LEFT;
 1d8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <position>
	}
	if(state==LANZAMIENTO  || state == PARPADEO){  // cambiar de direccion en estado de lanzamiento
 1dc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <middleInterrupt+0x20>
 1e4:	84 30       	cpi	r24, 0x04	; 4
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <middleInterrupt+0x2a>
		girarVertical(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 1f0:	08 95       	ret
	}
	else{
		frenoVertical();
 1f2:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 1f6:	08 95       	ret

000001f8 <leftInterrupt>:
	}
}

void leftInterrupt(){
	if(state==LANZAMIENTO  || state == PARPADEO){
 1f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	11 f0       	breq	.+4      	; 0x204 <leftInterrupt+0xc>
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	29 f4       	brne	.+10     	; 0x20e <leftInterrupt+0x16>
		girarVertical(1);  // cambiar de direccion en lanzamiento
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 91 00 	call	0x122	; 0x122 <girarVertical>
 20c:	08 95       	ret
	}
	else{
		frenoVertical();
 20e:	0e 94 b2 00 	call	0x164	; 0x164 <frenoVertical>
 212:	08 95       	ret

00000214 <updateTime>:
	}
}

// funciones usadas para el timer de main
inline void updateTime(){ 
	ms_elapsed += 10;
 214:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ms_elapsed>
 218:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ms_elapsed+0x1>
 21c:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <ms_elapsed+0x2>
 220:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <ms_elapsed+0x3>
 224:	0a 96       	adiw	r24, 0x0a	; 10
 226:	a1 1d       	adc	r26, r1
 228:	b1 1d       	adc	r27, r1
 22a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ms_elapsed>
 22e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ms_elapsed+0x1>
 232:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <ms_elapsed+0x2>
 236:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <ms_elapsed+0x3>
 23a:	08 95       	ret

0000023c <setTime>:
}
inline void setTime(int time){
	ms_elapsed = time;
 23c:	09 2e       	mov	r0, r25
 23e:	00 0c       	add	r0, r0
 240:	aa 0b       	sbc	r26, r26
 242:	bb 0b       	sbc	r27, r27
 244:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ms_elapsed>
 248:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ms_elapsed+0x1>
 24c:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <ms_elapsed+0x2>
 250:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <ms_elapsed+0x3>
 254:	08 95       	ret

00000256 <getTime>:
}
inline uint32_t getTime(){
	return ms_elapsed;
 256:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <ms_elapsed>
 25a:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <ms_elapsed+0x1>
 25e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ms_elapsed+0x2>
 262:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <ms_elapsed+0x3>
}
 266:	08 95       	ret

00000268 <__vector_9>:

// interrupcon del SW2 que sirva para distinguir que pulsador se ha pulsado
ISR(PCINT0_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	switch (lanzadorFlag){
 28a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	21 f0       	breq	.+8      	; 0x29a <__vector_9+0x32>
 292:	d8 f0       	brcs	.+54     	; 0x2ca <__vector_9+0x62>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	89 f1       	breq	.+98     	; 0x2fa <__vector_9+0x92>
 298:	39 c0       	rjmp	.+114    	; 0x30c <__vector_9+0xa4>
		case 1:  // moviemiento hacia derecha
		// si estoy RIGHT
		if (position==RIGHT){
 29a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <position>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <__vector_9+0x40>
			rightInterrupt();
 2a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <rightInterrupt>
 2a6:	11 c0       	rjmp	.+34     	; 0x2ca <__vector_9+0x62>
		}
		else if (position==LEFT){  // si estoy LEFT
 2a8:	81 11       	cpse	r24, r1
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <__vector_9+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	9f e0       	ldi	r25, 0x0F	; 15
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <__vector_9+0x48>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <__vector_9+0x4e>
 2b6:	00 00       	nop
			_delay_ms(1);
			if (getSensor2()==0){  // si el boton sigue pulsado
 2b8:	0e 94 cc 00 	call	0x198	; 0x198 <getSensor2>
 2bc:	89 2b       	or	r24, r25
 2be:	19 f4       	brne	.+6      	; 0x2c6 <__vector_9+0x5e>
				rightInterrupt();
 2c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <rightInterrupt>
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_9+0x62>
			}
			else{
				middleInterrupt();
 2c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <middleInterrupt>
			}
		}
		case 0:
		// si estoy moviendo hacia la izquierda y estoy LEFT
		if (position==LEFT){
 2ca:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <position>
 2ce:	81 11       	cpse	r24, r1
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <__vector_9+0x70>
			leftInterrupt();
 2d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <leftInterrupt>
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <__vector_9+0x92>
		}
		// movimiento hacia la izqrda, estoy RIGHT
		else if (position==RIGHT){
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	79 f4       	brne	.+30     	; 0x2fa <__vector_9+0x92>
 2dc:	8f e9       	ldi	r24, 0x9F	; 159
 2de:	9f e0       	ldi	r25, 0x0F	; 15
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <__vector_9+0x78>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <__vector_9+0x7e>
 2e6:	00 00       	nop
			_delay_ms(1);
			if (getSensor2()==0){  // si el boton sigue pulsado
 2e8:	0e 94 cc 00 	call	0x198	; 0x198 <getSensor2>
 2ec:	89 2b       	or	r24, r25
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__vector_9+0x8e>
				leftInterrupt();
 2f0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <leftInterrupt>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_9+0x92>
			}
			else{
				middleInterrupt();
 2f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <middleInterrupt>
			}
		}
		case 2:  // parado
		if(position == LEFT){
 2fa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <position>
 2fe:	81 11       	cpse	r24, r1
 300:	03 c0       	rjmp	.+6      	; 0x308 <__vector_9+0xa0>
			leftInterrupt();
 302:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <leftInterrupt>
 306:	02 c0       	rjmp	.+4      	; 0x30c <__vector_9+0xa4>
		}
		else{
			rightInterrupt();
 308:	0e 94 d6 00 	call	0x1ac	; 0x1ac <rightInterrupt>
		}
	}
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <setup>:
int s1state;
int s2state;
int s3state;

void setup(){
	enableInterrupt(SW2EIFR);
 32e:	8d b3       	in	r24, 0x1d	; 29
 330:	81 60       	ori	r24, 0x01	; 1
 332:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC01); // interrupcion solo en flanco de bajada, no modificando otros valores del registro
 334:	e9 e6       	ldi	r30, 0x69	; 105
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	80 83       	st	Z, r24
	// Sensores:
	setInput(SW2DDR, SW2X);
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	8a b9       	out	0x0a, r24	; 10
	setInput(SW3DDR, SW3X);
 344:	8a b1       	in	r24, 0x0a	; 10
 346:	8d 7f       	andi	r24, 0xFD	; 253
 348:	8a b9       	out	0x0a, r24	; 10
	setInput(SW4DDR, SW4X);
 34a:	8a b1       	in	r24, 0x0a	; 10
 34c:	8b 7f       	andi	r24, 0xFB	; 251
 34e:	8a b9       	out	0x0a, r24	; 10
	setInput(SW5DDR, SW5X);
 350:	8a b1       	in	r24, 0x0a	; 10
 352:	87 7f       	andi	r24, 0xF7	; 247
 354:	8a b9       	out	0x0a, r24	; 10
	// Motores:
	setOutput(M1_diDDR, M1_di_X);
 356:	e7 e0       	ldi	r30, 0x07	; 7
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	80 81       	ld	r24, Z
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	80 83       	st	Z, r24
	setOutput(M2_diDDR, M2_di_X);
 360:	80 81       	ld	r24, Z
 362:	80 68       	ori	r24, 0x80	; 128
 364:	80 83       	st	Z, r24
	setOutput(M3_diDDR, M3_di_X);
 366:	ea e0       	ldi	r30, 0x0A	; 10
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	80 81       	ld	r24, Z
 36c:	88 60       	ori	r24, 0x08	; 8
 36e:	80 83       	st	Z, r24
	setOutput(M4_diDDR, M4_di_X);
 370:	80 81       	ld	r24, Z
 372:	80 62       	ori	r24, 0x20	; 32
 374:	80 83       	st	Z, r24
	setOutput(M5_diDDR, M5_di_X);
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	8a b9       	out	0x0a, r24	; 10
	setOutput(M1_enDDR, M1_en_X);
 37c:	80 81       	ld	r24, Z
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	80 83       	st	Z, r24
	setOutput(M2_enDDR, M2_en_X);
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
	setOutput(M3_enDDR, M3_en_X);
 388:	80 81       	ld	r24, Z
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	80 83       	st	Z, r24
	setOutput(M4_enDDR, M4_en_X);
 38e:	80 81       	ld	r24, Z
 390:	80 68       	ori	r24, 0x80	; 128
 392:	80 83       	st	Z, r24
	setOutput(M5_enDDR, M5_en_X);
 394:	8a b1       	in	r24, 0x0a	; 10
 396:	80 68       	ori	r24, 0x80	; 128
 398:	8a b9       	out	0x0a, r24	; 10
	setOutput(M2_bkDDR, M2_bk_X);
 39a:	80 81       	ld	r24, Z
 39c:	88 60       	ori	r24, 0x08	; 8
 39e:	80 83       	st	Z, r24
 3a0:	08 95       	ret

000003a2 <timerSetup>:
}

void timerSetup(){
	TCCR1A = 0x00;
 3a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B = (1 << WGM12) | (1 << CS12);  // CTC mode, prescaler 256
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	OCR1A = 625;  // timer con frecuencia 100Hz
 3ac:	81 e7       	ldi	r24, 0x71	; 113
 3ae:	92 e0       	ldi	r25, 0x02	; 2
 3b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 3b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TIMSK1 = (1 << OCIE1A);
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
 3be:	08 95       	ret

000003c0 <main>:
}

int main(void)
{
	cli();
 3c0:	f8 94       	cli
	setup();
 3c2:	0e 94 97 01 	call	0x32e	; 0x32e <setup>
	timerSetup();
 3c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <timerSetup>
	sei();
 3ca:	78 94       	sei
	setTime(0);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 1e 01 	call	0x23c	; 0x23c <setTime>
		moverVastagoAtras();
		_delay_ms(500);
		moverVastagoAdelante();
		getSensor1();
	}
}
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	08 95       	ret

000003da <__vector_17>:

ISR(TIMER1_COMPA_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	updateTime();
 3fc:	0e 94 0a 01 	call	0x214	; 0x214 <updateTime>
	if (getTime() >500){
 400:	0e 94 2b 01 	call	0x256	; 0x256 <getTime>
 404:	65 3f       	cpi	r22, 0xF5	; 245
 406:	71 40       	sbci	r23, 0x01	; 1
 408:	81 05       	cpc	r24, r1
 40a:	91 05       	cpc	r25, r1
 40c:	c0 f0       	brcs	.+48     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		toggleBit(L1PORT,L1X);
 40e:	eb e0       	ldi	r30, 0x0B	; 11
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	90 81       	ld	r25, Z
 414:	80 e4       	ldi	r24, 0x40	; 64
 416:	89 27       	eor	r24, r25
 418:	80 83       	st	Z, r24
		s1state = getSensor1();
 41a:	0e 94 bb 00 	call	0x176	; 0x176 <getSensor1>
 41e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <s1state+0x1>
 422:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <s1state>
		s2state = getSensor2();
 426:	0e 94 cc 00 	call	0x198	; 0x198 <getSensor2>
 42a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <s2state+0x1>
 42e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <s2state>
		s3state = getSensor3();
 432:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <getSensor3>
 436:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <s3state+0x1>
 43a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <s3state>
	}
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
