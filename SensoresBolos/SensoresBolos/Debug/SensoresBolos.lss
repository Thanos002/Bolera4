
SensoresBolos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c85  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb2  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  000024d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000025fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a1 30       	cpi	r26, 0x01	; 1
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
 104:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <setup>:
#include <avr/interrupt.h>

uint8_t puntuacion = 0;
//volatile uint8_t puertoanterior = 0xFF;			//Preguntar Jorge, volatile y el fallo que nos daba de entrar a dos interrupciones

void setup(){
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	cli();
 114:	f8 94       	cli
	DDRK = 0xC0;    //0b11000000
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	20 ec       	ldi	r18, 0xC0	; 192
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	//PORTK |= (1 << PK0) | (1 << PK1) | (1 << PK2) | (1 << PK3) | (1 << PK4) | (1 << PK5);
 // Activa las resistencias de pull-up pq normalmente esta en nivel alto
	PCICR = (1<<PCIE2);
 120:	88 e6       	ldi	r24, 0x68	; 104
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	24 e0       	ldi	r18, 0x04	; 4
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	PCMSK2 = 0x3F;   //0b00111111 Hay que habilitarlos cuando llegue la señal de disparo, pq durante las deshabilitamos
 12a:	8d e6       	ldi	r24, 0x6D	; 109
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2f e3       	ldi	r18, 0x3F	; 63
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	sei();
 134:	78 94       	sei
}
 136:	00 00       	nop
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	setup();
 146:	0e 94 86 00 	call	0x10c	; 0x10c <setup>
    /* Replace with your application code */
    while (1) 
    {
    }
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0xc>

0000014c <__vector_11>:
}

ISR(PCINT2_vect){ //Cuidado que era por flanco de bajada
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	puntuacion++;
 16e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	volatile uint8_t puertoactual = ~PINK;
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	80 95       	com	r24
 182:	89 83       	std	Y+1, r24	; 0x01
	//volatile uint8_t bitscambiados= 0;
//	bitscambiados = ~(puertoactual ^ puertoanterior); //Lo negamos por el tema de que esta en nivel alto y pasa a nivel bajo
	
	//AND bit a bit para determinar si un bit en particular ha cambiado en el puerto
	if(puertoactual & (0b00000001)){
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	99 27       	eor	r25, r25
 18e:	89 2b       	or	r24, r25
 190:	49 f0       	breq	.+18     	; 0x1a4 <__vector_11+0x58>
		PCMSK2 &=~(1<<PCINT16);
 192:	8d e6       	ldi	r24, 0x6D	; 109
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	2d e6       	ldi	r18, 0x6D	; 109
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	2e 7f       	andi	r18, 0xFE	; 254
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
		} //Deshabilito esa interrupcion para que no rebote
	if(puertoactual & (0b00000010))
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	82 70       	andi	r24, 0x02	; 2
 1ac:	99 27       	eor	r25, r25
 1ae:	89 2b       	or	r24, r25
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <__vector_11+0x78>
	{PCMSK2 &=~(1<<PCINT17);
 1b2:	8d e6       	ldi	r24, 0x6D	; 109
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	2d e6       	ldi	r18, 0x6D	; 109
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	20 81       	ld	r18, Z
 1be:	2d 7f       	andi	r18, 0xFD	; 253
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00000100))
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	84 70       	andi	r24, 0x04	; 4
 1cc:	99 27       	eor	r25, r25
 1ce:	89 2b       	or	r24, r25
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <__vector_11+0x98>
	{PCMSK2 &=~(1<<PCINT18);
 1d2:	8d e6       	ldi	r24, 0x6D	; 109
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	2d e6       	ldi	r18, 0x6D	; 109
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	2b 7f       	andi	r18, 0xFB	; 251
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00001000))
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	88 70       	andi	r24, 0x08	; 8
 1ec:	99 27       	eor	r25, r25
 1ee:	89 2b       	or	r24, r25
 1f0:	49 f0       	breq	.+18     	; 0x204 <__vector_11+0xb8>
	{PCMSK2 &=~(1<<PCINT19);
 1f2:	8d e6       	ldi	r24, 0x6D	; 109
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2d e6       	ldi	r18, 0x6D	; 109
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	27 7f       	andi	r18, 0xF7	; 247
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00010000))
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	80 71       	andi	r24, 0x10	; 16
 20c:	99 27       	eor	r25, r25
 20e:	89 2b       	or	r24, r25
 210:	49 f0       	breq	.+18     	; 0x224 <__vector_11+0xd8>
	{PCMSK2 &=~(1<<PCINT20);
 212:	8d e6       	ldi	r24, 0x6D	; 109
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2d e6       	ldi	r18, 0x6D	; 109
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	2f 7e       	andi	r18, 0xEF	; 239
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	}
	if(puertoactual & (0b00100000))
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	80 72       	andi	r24, 0x20	; 32
 22c:	99 27       	eor	r25, r25
 22e:	89 2b       	or	r24, r25
 230:	49 f0       	breq	.+18     	; 0x244 <__vector_11+0xf8>
	{PCMSK2 &=~(1<<PCINT21);
 232:	8d e6       	ldi	r24, 0x6D	; 109
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	2d e6       	ldi	r18, 0x6D	; 109
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	20 81       	ld	r18, Z
 23e:	2f 7d       	andi	r18, 0xDF	; 223
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
	}
//ese and del if entra siempre que en 1 de los 8 bits salga un 1
	//	puertoanterior=puertoactual;
 244:	00 00       	nop
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
